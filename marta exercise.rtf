{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf600
{\fonttbl\f0\fmodern\fcharset0 Courier;\f1\fnil\fcharset0 LucidaGrande;}
{\colortbl;\red255\green255\blue255;\red53\green53\blue53;\red239\green239\blue239;\red38\green38\blue38;
\red255\green255\blue255;\red54\green100\blue164;}
{\*\expandedcolortbl;\csgray\c100000;\cssrgb\c27059\c27059\c27059;\cssrgb\c94902\c94902\c94902;\cssrgb\c20000\c20000\c20000;
\cssrgb\c100000\c100000\c100000;\cssrgb\c26667\c47451\c70196;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid102\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl280\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 fetch('http://developer.itsmarta.com/RealtimeTrain/RestServiceNextTrain/GetRealtimeArrivals?apikey=2c514350-0c26-47dd-b872-7936af81c8e1', \{\cb1 \
\cb3 	method: 'get'\cb1 \
\cb3 \}).then(function(response) \{\cb1 \
\cb3 	return response.json()\cb1 \
\cb3 \}).then(function(jsonData) \{\cb1 \
\cb3     console.log(jsonData);\cb1 \
\cb3 \}).catch(function(err) \{\cb1 \
\cb3 	// Error :(\cb1 \
\cb3 \});\
\
\
\
\pard\pardeftab720\sl320\sa240\partightenfactor0

\f1 \cf4 \cb5 \strokec4 Please extend the example code provided with the following features:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl300\partightenfactor0
\ls1\ilvl0\cf4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Add a drop down that lists Marta stops. (This is found under the DESTINATION key of the marta data.)\cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl300\partightenfactor0
\ls1\ilvl1\cf4 \cb5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Populate it dynamically based on the values found in the Marta data.\cb1 \
\ls1\ilvl1\cb5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 When a specific Marta stop is chosen, filter the data so that you only show data for that marta stop.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl300\partightenfactor0
\ls1\ilvl0\cf4 \cb5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Make the MartaDashboard look (much) nicer :)\cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl300\partightenfactor0
\ls1\ilvl1\cf4 \cb5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Break out the display into smaller components and style the components. (Yes, you can use Bootstrap if you'd like.)\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl300\partightenfactor0
\ls1\ilvl0\cf4 \cb5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Make sure to keep your components separate from App.js.\cb1 \
\pard\tx720\pardeftab720\sl300\partightenfactor0
\cf4 \
\
\pard\pardeftab720\sl320\sa240\partightenfactor0
\cf4 \cb5 You can optionally create a Hacker News Reader in React.\
The docs for accessing the API are here:\'a0{\field{\*\fldinst{HYPERLINK "https://github.com/HackerNews/API"}}{\fldrslt \cf6 \strokec6 https://github.com/HackerNews/API}}\
It uses Firebase, so you'll need to follow the instructions closely for integrating the API. But, you'll still need to call `this.setState` in the appropriate lifecycle methods.\
\'a0\
Some ideas for features:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl300\partightenfactor0
\ls2\ilvl0\cf4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Let the user choose to view 5, 10, or 20 top stories.\cb1 \
\ls2\ilvl0\cb5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Let the user page through the results.\cb1 \
\ls2\ilvl0\cb5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Add a form for searching through current stories.\cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl300\partightenfactor0
\ls2\ilvl1\cf4 \cb5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 If you're feeling frisky, you could even create an "autocomplete" input component.\cb1 \
\pard\tx720\pardeftab720\sl300\partightenfactor0
\cf4 \
}